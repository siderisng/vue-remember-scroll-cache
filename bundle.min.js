(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.bundle = factory());
}(this, (function () { 'use strict';

  // Copyright Giorgos Sideris 2021
  // github.com/siderisng
  // const defaultOptions = {}
  var linkAction = function linkAction(el, binding, vnode, Vue, selector) {
    var itemsName = binding.value.itemsName;
    var links = el.querySelectorAll(selector);
    links.forEach(function (link) {
      link.addEventListener("click", function () {
        Vue.prototype["$".concat(itemsName)] = vnode.context[itemsName];
        localStorage.setItem("v-remember-scroll-position", window.scrollY);
      });
    });
  };

  var index = {
    // called by Vue.use(FirstPlugin)
    install: function install(Vue, options) {
      // merge default options with arg options
      // const userOptions = { ...defaultOptions, ...options }
      // console.log(userOptions)
      // create a mixin
      Vue.mixin({
        created: function created() {}
      });
      Vue.directive("remember-scroll-cache", {
        // When the bound element is inserted into the DOM...
        bind: function bind(el, binding, vnode) {
          // binding.value: contains the object passed inside the directive in json format
          // binding.expression: contains the expression (as string) inside the custom directive
          // vnode.context: internal state of component where the directive is used in
          var scrollPosition = localStorage.getItem("v-remember-scroll-position");
          var itemsName = binding.value.itemsName;
          var selector = binding.value.selector; // console.log('scrollPosition', scrollPosition)

          if (scrollPosition) {
            setTimeout(function () {
              localStorage.removeItem("v-remember-scroll-position");
              Vue.prototype["$".concat(itemsName)] = null;
            }, 3000); //   console.log('moving to ', scrollPosition)

            setTimeout(function () {
              return window.scrollTo(0, scrollPosition);
            }, 2000);
          }

          linkAction(el, binding, vnode, Vue, selector);
        },
        componentUpdated: function componentUpdated(el, binding, vnode) {
          var selector = binding.value.selector; // REPEAT ACTION FOR CREATING LISTENERS AFTER COMPONENT UPDATE

          linkAction(el, binding, vnode, Vue, selector);
        }
      });
    }
  };

  return index;

})));
